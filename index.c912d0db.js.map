{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_define_property.js","src/game.js","src/view.js","src/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","export default class Game {\n  static points = {\n    1: 40,\n    2: 100,\n    3: 300,\n    4: 1200,\n  };\n\n  score = 0;\n  lines = 0;\n  playfield = this.createPlayfield();\n  activePiece = this.createPiece();\n  nextPiece = this.createPiece();\n\n  get level() {\n    return Math.floor(this.lines * 0.1);\n  }\n\n  getState() {\n    const playfield = this.createPlayfield();\n    const { y: pieceY, x: pieceX, blocks } = this.activePiece;\n\n    for (let y = 0; y < this.playfield.length; y++) {\n      playfield[y] = [];\n\n      for (let x = 0; x < this.playfield[y].length; x++) {\n        playfield[y][x] = this.playfield[y][x];\n      }\n    }\n\n    for (let y = 0; y < blocks.length; y++) {\n      for (let x = 0; x < blocks[y].length; x++) {\n        if (blocks[y][x]) {\n          playfield[pieceY + y][pieceX + x] = blocks[y][x];\n        }\n      }\n    }\n\n    return {\n      score: this.score,\n      level: this.level,\n      lines: this.lines,\n      nextPiece: this.nextPiece,\n      playfield,\n    };\n  }\n\n  createPlayfield() {\n    const playfield = [];\n\n    for (let y = 0; y < 20; y++) {\n      playfield[y] = [];\n\n      for (let x = 0; x < 10; x++) {\n        playfield[y][x] = 0;\n      }\n    }\n\n    return playfield;\n  }\n\n  createPiece() {\n    const index = Math.floor(Math.random() * 7);\n    const type = 'IJLOSTZ'[index];\n    const piece = {};\n\n    switch (type) {\n      case 'I':\n        piece.blocks = [\n          [0, 0, 0, 0],\n          [1, 1, 1, 1],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n        ];\n        break;\n      case 'J':\n        piece.blocks = [\n          [0, 0, 0],\n          [2, 2, 2],\n          [0, 0, 2],\n        ];\n        break;\n      case 'L':\n        piece.blocks = [\n          [0, 0, 0],\n          [3, 3, 3],\n          [3, 0, 0],\n        ];\n        break;\n      case 'O':\n        piece.blocks = [\n          [0, 0, 0, 0],\n          [0, 4, 4, 0],\n          [0, 4, 4, 0],\n          [0, 0, 0, 0],\n        ];\n        break;\n      case 'S':\n        piece.blocks = [\n          [0, 0, 0],\n          [0, 5, 5],\n          [5, 5, 0],\n        ];\n        break;\n      case 'T':\n        piece.blocks = [\n          [0, 0, 0],\n          [6, 6, 6],\n          [0, 6, 0],\n        ];\n        break;\n      case 'Z':\n        piece.blocks = [\n          [0, 0, 0],\n          [7, 7, 0],\n          [0, 7, 7],\n        ];\n        break;\n      default:\n        throw new Error('Unknown type of figure');\n    }\n\n    piece.x = Math.floor((10 - piece.blocks[0].length) / 2);\n    piece.y = 0;\n\n    return piece;\n  }\n\n  movePieceLeft() {\n    this.activePiece.x -= 1;\n\n    if (this.hasCollision()) {\n      this.activePiece.x += 1;\n    }\n  }\n\n  movePieceRight() {\n    this.activePiece.x += 1;\n\n    if (this.hasCollision()) {\n      this.activePiece.x -= 1;\n    }\n  }\n\n  movePieceDown() {\n    this.activePiece.y += 1;\n\n    if (this.hasCollision()) {\n      this.activePiece.y -= 1;\n      this.lockPiece();\n      const clearedLines = this.clearLines();\n      this.updateScore(clearedLines);\n      this.updatePieces();\n    }\n  }\n\n  rotatePiece() {\n    this.rotateBlocks();\n\n    if (this.hasCollision()) {\n      this.rotateBlocks(false);\n    }\n  }\n\n  rotateBlocks(clockwise = true) {\n    const blocks = this.activePiece.blocks;\n    const length = blocks.length;\n    const x = Math.floor(length / 2);\n    const y = length - 1;\n\n    for (let i = 0; i < x; i++) {\n      for (let j = i; j < y - i; j++) {\n        const temp = blocks[i][j];\n\n        if (clockwise) {\n          blocks[i][j] = blocks[y - j][i];\n          blocks[y - j][i] = blocks[y - i][y - j];\n          blocks[y - i][y - j] = blocks[j][y - i];\n          blocks[j][y - i] = temp;\n        } else {\n          blocks[i][j] = blocks[j][y - i];\n          blocks[j][y - i] = blocks[y - i][y - j];\n          blocks[y - i][y - j] = blocks[y - j][i];\n          blocks[y - j][i] = temp;\n        }\n      }\n    }\n  }\n\n  hasCollision() {\n    const { y: pieceY, x: pieceX, blocks } = this.activePiece;\n\n    for (let y = 0; y < blocks.length; y++) {\n      for (let x = 0; x < blocks.length; x++) {\n        if (\n          blocks[y][x] &&\n          (this.playfield[pieceY + y] === undefined ||\n            this.playfield[pieceY + y][pieceX + x] === undefined ||\n            this.playfield[pieceY + y][pieceX + x])\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  lockPiece() {\n    const { y: pieceY, x: pieceX, blocks } = this.activePiece;\n\n    for (let y = 0; y < blocks.length; y++) {\n      for (let x = 0; x < blocks.length; x++) {\n        if (blocks[y][x]) {\n          this.playfield[pieceY + y][pieceX + x] = blocks[y][x];\n        }\n      }\n    }\n  }\n\n  clearLines() {\n    const rows = 20;\n    const columns = 10;\n    let lines = [];\n\n    for (let y = rows - 1; y > 0; y--) {\n      let numberOfBlocks = 0;\n\n      for (let x = 0; x < columns; x++) {\n        if (this.playfield[y][x]) {\n          numberOfBlocks += 1;\n        }\n      }\n\n      if (numberOfBlocks === 0) {\n        break;\n      }\n      if (numberOfBlocks < columns) {\n        continue;\n      }\n      if (numberOfBlocks === columns) {\n        lines.unshift(y);\n      }\n    }\n\n    for (let index of lines) {\n      this.playfield.splice(index, 1);\n      this.playfield.unshift(new Array(columns).fill(0));\n    }\n\n    return lines.length;\n  }\n\n  updateScore(clearedLines) {\n    if (clearedLines > 0) {\n      this.score += Game.points[clearedLines] * (this.level + 1);\n      this.lines += clearedLines;\n    }\n  }\n\n  updatePieces() {\n    this.activePiece = this.nextPiece;\n    this.nextPiece = this.createPiece();\n    \n  }\n}\n","export default class View {\n  static colors = {\n    1: 'cyan',\n    2: 'blue',\n    3: 'orange',\n    4: 'yellow',\n    5: 'green',\n    6: 'purple',\n    7: 'red',\n  };\n\n  constructor(element, width, height, rows, columns) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.context = this.canvas.getContext('2d');\n\n    this.playfieldBorderWidth = 4;\n    this.playfieldX = this.playfieldBorderWidth;\n    this.playfieldY = this.playfieldBorderWidth;\n    this.playfieldWidth = this.width * 2 / 3;\n    this.playfieldHeight = this.height;\n    this.playfieldInnerWidth = this.playfieldWidth - this.playfieldBorderWidth * 2;\n    this.playfieldInnerHeight = this.playfieldHeight - this.playfieldBorderWidth * 2;\n\n    this.blockWidth = this.playfieldInnerWidth / columns;\n    this.blockHeight = this.playfieldInnerHeight / rows;\n\n    this.panelX = this.playfieldWidth + 10;\n    this.panelY = 0;\n    this.panelWidth = this.width / 3;\n    this.panelHeight = this.height;\n\n    this.element.appendChild(this.canvas);\n  }\n\n  renderMainScreen(state) {\n    this.clearScreen();\n    this.renderPlayfield(state);\n    this.renderPanel(state);\n  }\n\n   renderStartScreen() {\n    this.context.fillStyle = 'white';\n    this.context.font = '18px \"Press Start 2P\"';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText('Press ENTER to Start', this.width / 2, this.height / 2);\n  }\n\n  renderPauseScreen() {\n    this.context.fillStyle = 'rgba(0,0,0,0.75)';\n    this.context.fillRect(0, 0, this.width, this.height);\n\n    this.context.fillStyle = 'white';\n    this.context.font = '18px \"Press Start 2P\"';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText('Press ENTER to Resume', this.width / 2, this.height / 2);\n  }\n\n  renderEndScreen({ score }) {\n    this.clearScreen();\n\n    this.context.fillStyle = 'white';\n    this.context.font = '18px \"Press Start 2P\"';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText('GAME OVER', this.width / 2, this.height / 2 - 48);\n    this.context.fillText(`Score: ${score}`, this.width / 2, this.height / 2);\n  }\n\n  clearScreen() {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n\n  renderPlayfield({ playfield }) {\n    for (let y = 0; y < playfield.length; y++) {\n      const line = playfield[y];\n\n      for (let x = 0; x < line.length; x++) {\n        const block = line[x];\n\n        if (block) {\n          this.renderBlock(\n            this.playfieldX + (x * this.blockWidth),\n            this.playfieldY + (y * this.blockHeight),\n            this.blockWidth,\n            this.blockHeight,\n            View.colors[block]\n          );\n        }\n      }\n    }\n\n    this.context.strokeStyle = 'white';\n    this.context.lineWidth = this.playfieldBorderWidth;\n    this.context.strokeRect(0, 0, this.playfieldWidth, this.playfieldHeight);\n\n  }\n\n  renderPanel({ level, score, lines, nextPiece }) {\n    this.context.textAlign = 'start';\n    this.context.textBaseline = 'top';\n    this.context.fillStyle = 'white';\n    this.context.font = '14px \"Press Start 2P\"';\n\n    this.context.fillText(`Score: ${score}`, this.panelX, this.panelY + 0);\n    this.context.fillText(`Lines: ${lines}`, this.panelX, this.panelY + 24);\n    this.context.fillText(`Level: ${level}`, this.panelX, this.panelY + 48);\n    this.context.fillText('Next:', this.panelX, this.panelY + 96);\n\n    for (let y = 0; y < nextPiece.blocks.length; y++) {\n      for (let x = 0; x < nextPiece.blocks[y].length; x++) {\n        const block = nextPiece.blocks[y][x];\n\n        if (block) {\n          this.renderBlock(\n            this.panelX + (x * this.blockWidth * 0.5),\n            this.panelY + 100 + (y * this.blockHeight * 0.5),\n            this.blockWidth * 0.5,\n            this.blockHeight * 0.5,\n            View.colors[block]\n          );\n        }\n      }\n    }\n  }\n\n  renderBlock(x, y, width, height, color) {\n    this.context.fillStyle = color;\n    this.context.strokeStyle = 'black';\n    this.context.lineWidth = 2;\n\n    this.context.fillRect(x, y, width, height);\n    this.context.strokeRect(x, y, width, height);\n  }\n}\n","import Game from './game';\nimport View from './view';\n\nconst root = document.querySelector('#root');\n\nconst game = new Game();\nconst view = new View(root, 480, 640, 20, 10);\n\nwindow.game = game;\nwindow.view = view;\n\ndocument.addEventListener(\"keydown\", event => {\n    switch (event.keyCode) {\n        case 37: // LEFT ARROW\n            game.movePieceLeft();\n            view.render(game.getState());\n            break;\n        case 38: // UP ARROW\n            game.rotatePiece();\n            view.render(game.getState());\n            break;\n        case 39: // RIGHT ARROW\n            game.movePieceRight();\n            view.render(game.getState());\n            break;\n        case 40: // DOWN ARROW\n            game.movePieceDown();\n            view.render(game.getState());\n            break;\n    }\n})\n\n"],"names":["Object","defineProperty","$da4b248c00322402$exports","value","default","obj","key","enumerable","configurable","writable","$91c667a13b4c74a9$export$2e2bcd8739ae039","level","Math","floor","this","lines","getState","playfield","createPlayfield","y","pieceY","x","pieceX","blocks","activePiece","length","y1","score","nextPiece","createPiece","piece","random","Error","movePieceLeft","hasCollision","movePieceRight","movePieceDown","lockPiece","clearedLines","clearLines","updateScore","updatePieces","rotatePiece","rotateBlocks","clockwise","i","j","temp","undefined","rows","numberOfBlocks","unshift","index","splice","Array","fill","points","$parcel$interopDefault","$159cd715dad6a107$export$2e2bcd8739ae039","renderMainScreen","state","clearScreen","renderPlayfield","renderPanel","renderStartScreen","context","fillStyle","font","textAlign","textBaseline","fillText","width","height","renderPauseScreen","fillRect","renderEndScreen","clearRect","line","block","renderBlock","playfieldX","blockWidth","playfieldY","blockHeight","colors","strokeStyle","lineWidth","playfieldBorderWidth","strokeRect","playfieldWidth","playfieldHeight","panelX","panelY","color","constructor","element","columns","canvas","document","createElement","getContext","playfieldInnerWidth","playfieldInnerHeight","panelWidth","panelHeight","appendChild","$1f0dc3b9307be026$var$root","querySelector","$1f0dc3b9307be026$var$game","$1f0dc3b9307be026$var$view","window","game","view","addEventListener","event","keyCode","render"],"version":3,"file":"index.c912d0db.js.map"}