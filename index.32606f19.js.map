{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_define_property.js","src/playfield.js","src/piece.js","src/game.js","src/view.js","src/index.js","src/controller.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","export default class Playfield extends Array {\n  constructor(rows, columns) {\n    super();\n\n    this.rows = rows;\n    this.columns = columns;\n\n    for (let i = 0; i < rows; i++) {\n      this[i] = new Array(columns).fill(0);\n    }\n  }\n\n  hasCollision(piece) {\n    for (let block of piece) {\n      if (\n        block &&\n        (this._isOutOfBounds(block.x, block.y) ||\n          this._isOccupied(block.x, block.y))\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  lockPiece(piece) {\n    for (let block of piece) {\n      if (block) {\n        this[block.y][block.x] = block;\n      }\n    }\n  }\n\n  clearLines() {\n    const linesToRemove = this._getLinesToRemove();\n\n    return this._removeLines(linesToRemove);\n  }\n\n  reset() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this[i][j] = 0;\n      }\n    }\n  }\n\n  _getLinesToRemove() {\n    let lines = [];\n\n    for (let y = this.rows - 1; y >= 0; y--) {\n      let numberOfBlocks = 0;\n\n      for (let x = 0; x < this.columns; x++) {\n        if (this[y][x]) {\n          numberOfBlocks += 1;\n        }\n      }\n\n      if (numberOfBlocks === 0) {\n        break;\n      } else if (numberOfBlocks < this.columns) {\n        continue;\n      } else if (numberOfBlocks === this.columns) {\n        lines.unshift(y);\n      }\n    }\n\n    return lines;\n  }\n\n  _removeLines(lines) {\n    for (let index of lines) {\n      this.splice(index, 1);\n      this.unshift(new Array(this.columns).fill(0));\n    }\n\n    return lines.length;\n  }\n\n  _isOutOfBounds(x, y) {\n    return this[y] === undefined || this[y][x] === undefined;\n  }\n\n  _isOccupied(x, y) {\n    return this[y][x];\n  }\n\n  *[Symbol.iterator]() {\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.columns; x++) {\n        yield this[y][x];\n      }\n    }\n  }\n}\n","export default class Piece {\n  static blocks = {\n    I: () => [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    J: () => [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    L: () => [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    O: () => [\n      [0, 0, 0, 0],\n      [0, 1, 1, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    S: () => [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    T: () => [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    Z: () => [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n  };\n\n  static get types() {\n    return Object.keys(this.blocks);\n  }\n\n  static getRandomType() {\n    const index = Math.floor(Math.random() * this.types.length);\n    return this.types[index];\n  }\n\n  constructor(type = Piece.getRandomType(), x = 0, y = 0) {\n    if (!Piece.types.includes(type)) {\n      throw new Error('Invalid peice type');\n    }\n\n    this.type = type;\n    this.blocks = Piece.blocks[this.type]();\n    this.x = x;\n    this.y = y;\n  }\n\n  get width() {\n    return this.blocks[0].length;\n  }\n\n  get height() {\n    return this.blocks.length;\n  }\n\n  rotate(clockwise = true) {\n    const blocks = this.blocks;\n    const length = blocks.length;\n    const x = Math.floor(length / 2);\n    const y = length - 1;\n\n    for (let i = 0; i < x; i++) {\n      for (let j = i; j < y - i; j++) {\n        let temp = blocks[i][j];\n\n        if (clockwise) {\n          blocks[i][j] = blocks[y - j][i];\n          blocks[y - j][i] = blocks[y - i][y - j];\n          blocks[y - i][y - j] = blocks[j][y - i];\n          blocks[j][y - i] = temp;\n        } else {\n          blocks[i][j] = blocks[j][y - i];\n          blocks[j][y - i] = blocks[y - i][y - j];\n          blocks[y - i][y - j] = blocks[y - j][i];\n          blocks[y - j][i] = temp;\n        }\n      }\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (let y = 0; y < this.blocks.length; y++) {\n      for (let x = 0; x < this.blocks[y].length; x++) {\n        yield this.blocks[y][x] === 1\n          ? {\n              x: this.x + x,\n              y: this.y + y,\n              type: this.type,\n            }\n          : null;\n      }\n    }\n  }\n}\n","import Playfield from './playfield.js';\nimport Piece from './piece.js';\n\nexport default class Game {\n  static points = {\n    1: 40,\n    2: 100,\n    3: 300,\n    4: 1200,\n  };\n\n  _score = 0;\n  _lines = 0;\n  _topOut = false;\n  _activePiece = null;\n  _nextPiece = null;\n\n  constructor(rows, columns) {\n    this._playfield = new Playfield(rows, columns);\n    this._updatePieces();\n  }\n\n  get level() {\n    return Math.floor(this._lines * 0.1);\n  }\n\n  get state() {\n    return {\n      score: this._score,\n      level: this.level,\n      lines: this._lines,\n      playfield: this._playfield,\n      activePiece: this._activePiece,\n      nextPiece: this._nextPiece,\n      isGameOver: this._topOut,\n    };\n  }\n\n  reset() {\n    this._score = 0;\n    this._lines = 0;\n    this._topOut = false;\n    this._playfield.reset();\n    this._updatePieces();\n  }\n\n  movePieceLeft() {\n    this._activePiece.x -= 1;\n\n    if (this._playfield.hasCollision(this._activePiece)) {\n      this._activePiece.x += 1;\n    }\n  }\n\n  movePieceRight() {\n    this._activePiece.x += 1;\n\n    if (this._playfield.hasCollision(this._activePiece)) {\n      this._activePiece.x -= 1;\n    }\n  }\n\n  movePieceDown() {\n    if (this._topOut) return;\n\n    this._activePiece.y += 1;\n\n    if (this._playfield.hasCollision(this._activePiece)) {\n      this._activePiece.y -= 1;\n      this._update();\n    }\n  }\n\n  rotatePiece() {\n    this._activePiece.rotate();\n\n    if (this._playfield.hasCollision(this._activePiece)) {\n      this._activePiece.rotate(false);\n    }\n  }\n\n  _update() {\n    this._updatePlayfield();\n    this._updateScore();\n    this._updatePieces();\n\n    if (this._playfield.hasCollision(this._activePiece)) {\n      this._topOut = true;\n    }\n  }\n\n  _updatePlayfield() {\n    this._playfield.lockPiece(this._activePiece);\n  }\n\n  _updateScore() {\n    const clearedLines = this._playfield.clearLines();\n\n    if (clearedLines > 0) {\n      this._score += Game.points[clearedLines] * (this.level + 1);\n      this._lines += clearedLines;\n    }\n  }\n\n  _updatePieces() {\n    this._activePiece = this._nextPiece || new Piece();\n    this._nextPiece = new Piece();\n    console.log('_updatePieces', this._activePiece, this._nextPiece);\n    this._activePiece.x = Math.floor(\n      (this._playfield.columns - this._activePiece.width) / 2\n    );\n    this._activePiece.y = -1;\n  }\n}\n","export default class View {\n  static colors = {\n    I: 'cyan',\n    J: 'blue',\n    L: 'orange',\n    O: 'yellow',\n    S: 'green',\n    T: 'purple',\n    Z: 'red',\n  };\n\n  constructor({ element, width, height, rows, columns }) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.context = this.canvas.getContext('2d');\n\n    this.playfieldBorderWidth = 4;\n    this.playfieldX = this.playfieldBorderWidth;\n    this.playfieldY = this.playfieldBorderWidth;\n    this.playfieldWidth = (this.width * 2) / 3;\n    this.playfieldHeight = this.height;\n    this.playfieldInnerWidth =\n      this.playfieldWidth - this.playfieldBorderWidth * 2;\n    this.playfieldInnerHeight =\n      this.playfieldHeight - this.playfieldBorderWidth * 2;\n\n    this.blockWidth = this.playfieldInnerWidth / columns;\n    this.blockHeight = this.playfieldInnerHeight / rows;\n\n    this.panelX = this.playfieldWidth + 10;\n    this.panelY = 0;\n    this.panelWidth = this.width / 3;\n    this.panelHeight = this.height;\n\n    this.element.appendChild(this.canvas);\n  }\n\n  on(event, handler) {\n    document.addEventListener(event, handler);\n  }\n\n  renderStartScreen() {\n    this.context.fillStyle = 'white';\n    this.context.font = '18px \"Press Start 2P\"';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText(\n      'Press ENTER to Start',\n      this.width / 2,\n      this.height / 2\n    );\n  }\n\n  renderMainScreen(state) {\n    this._clearScreen();\n    this._renderPlayfield(state);\n    this._renderPanel(state);\n    this._renderBorder();\n  }\n\n  renderPauseScreen() {\n    this._clearScreen('rgba(0, 0, 0, 0.75)');\n\n    this.context.fillStyle = 'white';\n    this.context.font = '16px \"Press Start 2P\"';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText('PAUSE', this.width / 2, this.height / 2 - 48);\n    this.context.fillText(\n      'Press ENTER to Resume',\n      this.width / 2,\n      this.height / 2\n    );\n  }\n\n  renderEndScreen({ score }) {\n    this._clearScreen();\n\n    this.context.fillStyle = 'white';\n    this.context.font = '18px \"Press Start 2P\"';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText('GAME OVER', this.width / 2, this.height / 2 - 48);\n    this.context.fillText(`Score: ${score}`, this.width / 2, this.height / 2);\n    this.context.fillText(\n      'Press ENTER to Restart',\n      this.width / 2,\n      this.height / 2 + 48\n    );\n  }\n\n  _clearScreen(color = 'black') {\n    this.context.fillStyle = color;\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  _renderBorder() {\n    this.context.strokeStyle = 'white';\n    this.context.lineWidth = this.playfieldBorderWidth;\n    this.context.strokeRect(0, 0, this.playfieldWidth, this.playfieldHeight);\n  }\n\n  _renderPlayfield({ playfield, activePiece }) {\n    for (let y = 0; y < playfield.length; y++) {\n      const line = playfield[y];\n\n      for (let x = 0; x < line.length; x++) {\n        const block = playfield[y][x];\n\n        if (block) {\n          this._renderBlock({\n            x: this.playfieldX + x * this.blockWidth,\n            y: this.playfieldY + y * this.blockHeight,\n            width: this.blockWidth,\n            height: this.blockHeight,\n            color: View.colors[block.type],\n          });\n        }\n      }\n    }\n\n    this._renderPiece(activePiece, {\n      x: this.playfieldX,\n      y: this.playfieldY,\n      width: this.blockWidth,\n      height: this.blockHeight,\n    });\n  }\n\n  _renderPanel({ level, score, lines, nextPiece }) {\n    this.context.textAlign = 'start';\n    this.context.textBaseline = 'top';\n    this.context.fillStyle = 'white';\n    this.context.font = '14px \"Press Start 2P\"';\n\n    this.context.fillText(`Level: ${level}`, this.panelX, this.panelY + 0);\n    this.context.fillText(`Score: ${score}`, this.panelX, this.panelY + 24);\n    this.context.fillText(`Lines: ${lines}`, this.panelX, this.panelY + 48);\n    this.context.fillText('Next:', this.panelX, this.panelY + 96);\n\n    this._renderPiece(nextPiece, {\n      x: this.panelX,\n      y: this.panelY + 120,\n      width: this.blockWidth * 0.5,\n      height: this.blockHeight * 0.5,\n    });\n  }\n\n  _renderPiece(\n    piece,\n    { x, y, width = this.blockWidth, height = this.blockHeight }\n  ) {\n    for (let block of piece) {\n      if (block) {\n        this._renderBlock({\n          x: x + block.x * width,\n          y: y + block.y * height,\n          width,\n          height,\n          color: View.colors[block.type],\n        });\n      }\n    }\n  }\n\n  _renderBlock({ x, y, width, height, lineWidth = 2, color = 'black' }) {\n    this.context.fillStyle = color;\n    this.context.strokeStyle = 'black';\n    this.context.lineWidth = lineWidth;\n    this.context.fillRect(x, y, width, height);\n    this.context.strokeRect(x, y, width, height);\n  }\n}\n","import Game from './game';\nimport View from './view';\nimport Controller from './controller';\n\nconst GRID_ROWS = 20;\nconst GRID_COLUMNS = 10;\n\nconst element = document.querySelector('#root');\n\nconst game = new Game(GRID_ROWS, GRID_COLUMNS);\nconst view = new View({element, width: 480, height: 640, rows: GRID_ROWS, columns: GRID_COLUMNS});\nconst controller = new Controller(game, view);\n\n\n\n","export default class Controller {\n  constructor(game, view) {\n    this._game = game;\n    this._view = view;\n    this._isPlaying = false;\n    this._interval = null;\n\n    this.update = this.update.bind(this);\n\n    view.on('keypress', this._handleKeyPress.bind(this));\n    view.on('keydown', this._handleKeyDown.bind(this));\n    view.on('keyup', this._handleKeyUp.bind(this));\n\n    this._view.renderStartScreen();\n  }\n\n  update() {\n    this._game.movePieceDown();\n    this._updateView();\n  }\n\n  play() {\n    this._isPlaying = true;\n    this._startTimer();\n    this._updateView();\n  }\n\n  pause() {\n    this._isPlaying = false;\n    this._stopTimer();\n    this._updateView();\n  }\n\n  reset() {\n    this._game.reset();\n    this.play();\n  }\n\n  _updateView() {\n    const state = this._game.state;\n\n    if (state.isGameOver) {\n      this._view.renderEndScreen(state);\n    } else if (!this._isPlaying) {\n      this._view.renderPauseScreen(state);\n    } else {\n      this._view.renderMainScreen(state);\n    }\n  }\n\n  _startTimer() {\n    const speed = 1000 - this._game.level * 100;\n\n    if (!this._interval) {\n      this._interval = setInterval(\n        () => {\n          this.update();\n        },\n        speed > 0 ? speed : 100\n      );\n    }\n  }\n\n  _stopTimer() {\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n  }\n\n  _handleKeyPress(event) {\n    switch (event.keyCode) {\n      case 13: // ENTER\n        if (this._game.state.isGameOver) {\n          console.log(this._game.state);\n          this.reset();\n        } else if (this._isPlaying) {\n          this.pause();\n        } else {\n          this.play();\n        }\n        break;\n    }\n  }\n\n  _handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37: // LEFT ARROW\n        if (this._isPlaying) this._game.movePieceLeft();\n        this._updateView();\n        break;\n      case 38: // UP ARROW\n        this._game.rotatePiece();\n        this._updateView();\n        break;\n      case 39: // RIGHT ARROW\n        this._game.movePieceRight();\n        this._updateView();\n        break;\n      case 40: // DOWN ARROW\n        this._stopTimer();\n        this._game.movePieceDown();\n        this._updateView();\n        break;\n    }\n  }\n\n  _handleKeyUp(event) {\n    switch (event.keyCode) {\n      case 40: // DOWN ARROW\n        this._startTimer();\n        break;\n    }\n  }\n}\n"],"names":["Object","defineProperty","$da4b248c00322402$exports","value","default","obj","key","enumerable","configurable","writable","$053064e022f0c836$var$_iterator","Symbol","iterator","$053064e022f0c836$export$2e2bcd8739ae039","Array","hasCollision","piece","block","this","_isOutOfBounds","x","y","_isOccupied","lockPiece","clearLines","linesToRemove","_getLinesToRemove","_removeLines","reset","i","rows","j","columns","lines","numberOfBlocks","unshift","index","splice","fill","length","undefined","constructor","super","$66d15f4226a33563$var$_iterator","$66d15f4226a33563$export$2e2bcd8739ae039","types","keys","blocks","static","Math","floor","random","width","height","rotate","clockwise","temp","type","getRandomType","includes","Error","$parcel$interopDefault","I","J","L","O","S","T","Z","$91c667a13b4c74a9$export$2e2bcd8739ae039","level","_lines","state","score","_score","playfield","_playfield","activePiece","_activePiece","nextPiece","_nextPiece","isGameOver","_topOut","_updatePieces","movePieceLeft","movePieceRight","movePieceDown","_update","rotatePiece","_updatePlayfield","_updateScore","clearedLines","points","console","log","$159cd715dad6a107$export$2e2bcd8739ae039","on","event","handler","document","addEventListener","renderStartScreen","context","fillStyle","font","textAlign","textBaseline","fillText","renderMainScreen","_clearScreen","_renderPlayfield","_renderPanel","_renderBorder","renderPauseScreen","renderEndScreen","color","fillRect","strokeStyle","lineWidth","playfieldBorderWidth","strokeRect","playfieldWidth","playfieldHeight","line","_renderBlock","playfieldX","blockWidth","playfieldY","blockHeight","colors","_renderPiece","panelX","panelY","element","canvas","createElement","getContext","playfieldInnerWidth","playfieldInnerHeight","panelWidth","panelHeight","appendChild","$1f0dc3b9307be026$var$element","querySelector","$1f0dc3b9307be026$var$game","$1f0dc3b9307be026$var$view","update","_game","_updateView","play","_isPlaying","_startTimer","pause","_stopTimer","_view","speed","_interval","setInterval","clearInterval","_handleKeyPress","keyCode","_handleKeyDown","_handleKeyUp","game","view","bind"],"version":3,"file":"index.32606f19.js.map"}