{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_define_property.js","src/index.js","src/game.js","src/view.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","import Game from './game';\nimport View from './view';\n\nconst root = document.querySelector('#root');\n\nconst game = new Game();\nconst view = new View(root, 320, 640, 20, 10);\n\nwindow.game = game;\nwindow.view = view;\n\ndocument.addEventListener(\"keydown\", event => {\n    switch (event.keyCode) {\n        case 37: // LEFT ARROW\n            game.movePieceLeft();\n            view.render(game.getState());\n            break;\n        case 38: // UP ARROW\n            game.rotatePiece();\n            view.render(game.getState());\n            break;\n        case 39: // RIGHT ARROW\n            game.movePieceRight();\n            view.render(game.getState());\n            break;\n        case 40: // DOWN ARROW\n            game.movePieceDown();\n            view.render(game.getState());\n            break;\n    }\n})\n\n","export default class Game {\n  score = 0;\n  lines = 0;\n  level = 0;\n  playfield = this.createPlayfield();\n  activePiece = {\n    x: 0,\n    y: 0,\n    blocks: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n  };\n\n  getState() {\n    const playfield = this.createPlayfield();\n    const { y: pieceY, x: pieceX, blocks } = this.activePiece;\n\n    for (let y = 0; y < this.playfield.length; y++) {\n      playfield[y] = [];\n\n      for (let x = 0; x < this.playfield[y].length; x++) {\n        playfield[y][x] = this.playfield[y][x];\n      }\n    }\n\n    for (let y = 0; y < blocks.length; y++) {\n      for (let x = 0; x < blocks[y].length; x++) {\n        if (blocks[y][x]) {\n          playfield[pieceY + y][pieceX + x] = blocks[y][x];\n        }\n      }\n    }\n\n    return {\n      playfield,\n    };\n  }\n\n  createPlayfield() {\n    const playfield = [];\n\n    for (let y = 0; y < 20; y++) {\n      playfield[y] = [];\n\n      for (let x = 0; x < 10; x++) {\n        playfield[y][x] = 0;\n      }\n    }\n\n    return playfield;\n  }\n\n  movePieceLeft() {\n    this.activePiece.x -= 1;\n\n    if (this.hasCollision()) {\n      this.activePiece.x += 1;\n    }\n  }\n\n  movePieceRight() {\n    this.activePiece.x += 1;\n\n    if (this.hasCollision()) {\n      this.activePiece.x -= 1;\n    }\n  }\n\n  movePieceDown() {\n    this.activePiece.y += 1;\n\n    if (this.hasCollision()) {\n      this.activePiece.y -= 1;\n      this.lockPiece();\n    }\n  }\n\n  rotatePiece() {\n    this.rotateBlocks();\n\n    if (this.hasCollision()) {\n      this.rotateBlocks(false);\n    }\n  }\n\n  rotateBlocks(clockwise = true) {\n    const blocks = this.activePiece.blocks;\n    const length = blocks.length;\n    const x = Math.floor(length / 2);\n    const y = length - 1;\n\n    for (let i = 0; i < x; i++) {\n      for (let j = i; j < y - i; j++) {\n        const temp = blocks[i][j];\n\n        if (clockwise) {\n          blocks[i][j] = blocks[y - j][i];\n          blocks[y - j][i] = blocks[y - i][y - j];\n          blocks[y - i][y - j] = blocks[j][y - i];\n          blocks[j][y - i] = temp;\n        } else {\n          blocks[i][j] = blocks[j][y - i];\n          blocks[j][y - i] = blocks[y - i][y - j];\n          blocks[y - i][y - j] = blocks[y - j][i];\n          blocks[y - j][i] = temp;\n        }\n      }\n    }\n  }\n\n  hasCollision() {\n    const { y: pieceY, x: pieceX, blocks } = this.activePiece;\n\n    for (let y = 0; y < blocks.length; y++) {\n      for (let x = 0; x < blocks.length; x++) {\n        if (\n          blocks[y][x] &&\n          (this.playfield[pieceY + y] === undefined ||\n            this.playfield[pieceY + y][pieceX + x] === undefined ||\n            this.playfield[pieceY + y][pieceX + x])\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  lockPiece() {\n    const { y: pieceY, x: pieceX, blocks } = this.activePiece;\n\n    for (let y = 0; y < blocks.length; y++) {\n      for (let x = 0; x < blocks.length; x++) {\n        if (blocks[y][x]) {\n          this.playfield[pieceY + y][pieceX + x] = blocks[y][x];\n        }\n      }\n    }\n  }\n}\n","export default class View {\n  constructor(element, width, height, rows, columns) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.context = this.canvas.getContext('2d');\n\n    this.blockWidth = this.width / columns;\n    this.blockHeight = this.height / rows;\n\n    this.element.appendChild(this.canvas);\n  }\n\n  render({ playfield }) {\n    this.clearScreen();\n    this.renderPlayfield(playfield);\n  }\n\n  clearScreen() {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n\n  renderPlayfield(playfield) {\n    for (let y = 0; y < playfield.length; y++) {\n      const line = playfield[y];\n\n      for (let x = 0; x < line.length; x++) {\n        const block = line[x];\n\n        if (block) {\n          this.renderBlock(\n            x * this.blockWidth,\n            y * this.blockHeight,\n            this.blockWidth,\n            this.blockHeight,\n            'red'\n          );\n        }\n      }\n    }\n  }\n\n  renderBlock(x, y, width, height, color) {\n    this.context.fillStyle = color;\n    this.context.strokeStyle = 'black';\n    this.context.lineWidth = 2;\n\n    this.context.fillRect(x, y, width, height);\n    this.context.strokeRect(x, y, width, height);\n  }\n}\n"],"names":["Object","defineProperty","$da4b248c00322402$exports","value","default","obj","key","enumerable","configurable","writable","$1f0dc3b9307be026$var$root","document","querySelector","$1f0dc3b9307be026$var$game","getState","playfield","this","createPlayfield","y","pieceY","x","pieceX","blocks","activePiece","length","y1","movePieceLeft","hasCollision","movePieceRight","movePieceDown","lockPiece","rotatePiece","rotateBlocks","clockwise","Math","floor","i","j","temp","undefined","$parcel$interopDefault","$1f0dc3b9307be026$var$view","render","clearScreen","renderPlayfield","context","clearRect","width","height","line","renderBlock","blockWidth","blockHeight","color","fillStyle","strokeStyle","lineWidth","fillRect","strokeRect","constructor","element","rows","columns","canvas","createElement","getContext","appendChild","window","game","view","addEventListener","event","keyCode"],"version":3,"file":"index.c573ab9c.js.map"}